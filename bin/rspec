#!/usr/bin/env ruby
# frozen_string_literal: true

## Discourse plugin bin/rspec
## Copyright (c) 2025 Michiel Hendriks
## SPDX-License-Identifier: MIT
## https://github.com/magicball-network/discourse-plugin-bin-rspec

## This rspec script is meant to be executed from a Discourse plugin directory.
## Effectively it will execute Discourse's bin/rspec script with some adjusted
## parameters. Besides being able to use it directly from the command line this
## script takes some special attention when it is executed from ruby-lsp-rspec.
##
## When executed form a plain commandline it will prefix all non-option arguments
## with the plugin directory relative to the Discourse base directory. If no
## path arguments are provided it uses the plugin's directory so that all spec
## files from the plugin are executed.
##
## When this script is executed from ruby-lsp-rspec it makes sure the environment
## is properly prepared for the spec files to be executed from a different
## directory.

require "pathname"
require "tmpdir"

# Determine plugin path
script_path = Pathname.new($0)
script_path = Pathname.new(File.absolute_path($0)) unless script_path.absolute?
plugin_path = script_path.parent
plugin_path = plugin_path.parent if plugin_path.basename.to_s == "bin"

if !File.exist?(File.join(plugin_path, "plugin.rb"))
  STDERR.puts "Discourse plugin not detected at: #{plugin_path}"
  exit(1)
end

discourse_root = File.expand_path("../../", plugin_path)

if !File.exist?(File.join(discourse_root, "config", "discourse_defaults.conf"))
  STDERR.puts "Discourse root directory not detected at: #{discourse_root}"
  exit(1)
end

plugin_relpath =
  File.join("./", plugin_path.relative_path_from(discourse_root), "/")

ENV["BUNDLE_GEMFILE"] = File.join(discourse_root, "Gemfile")
ENV["LOAD_PLUGINS"] = "1"
ENV["RAILS_ENV"] = "test"

argv = ARGV.dup

if ENV["RUBY_LSP_TEST_RUNNER"] ||
     (ENV["RUBYOPT"] && ENV["RUBYOPT"].include?("ruby_lsp/test_reporters")) ||
     (ARGV.include?("RubyLsp::RSpec::RSpecFormatter"))
  # Executed from ruby-lsp, either directly or from the commandline

  unless ENV["RUBY_LSP_REPORTER_PORT"]
    # Set the lsp port as environment variable as it cannot be resolved
    # based on the current working dir when rspec is actually executed
    require "json"
    port_db_path =
      File.join(Dir.tmpdir, "ruby-lsp", "test_reporter_port_db.json")
    if File.exist?(port_db_path)
      db = JSON.load_file(port_db_path)
      ENV["RUBY_LSP_REPORTER_PORT"] = db[Dir.pwd]
    end
  end

  # Ensure ruby-lsp gem can be found
  ruby_lsp_path = File.join(Gem.loaded_specs["ruby-lsp"].gem_dir, "lib")
  argv.unshift("-I#{ruby_lsp_path}")

  puts "Augmented for ruby-lsp. port: #{ENV["RUBY_LSP_REPORTER_PORT"]}"

  patch_file = ".ruby-lsp/ruby_lsp_rspec_patch.rb"
  if !Pathname.new(patch_file).exist? ||
       File.mtime(__FILE__) > File.mtime(patch_file)
    patch = <<~'RUBY'
      module RubyLsp
        module RSpec
          class RSpecFormatter
            def initialize(output)
              @output = output
              @relative_path = ENV["RUBY_LSP_RSPEC_RELPATH"]
            end

            # Patch the ruby-lsp-rspec's reporter to correct test ids
            def generate_id(example)
              [example, *example.example_group.parent_groups].reverse.map(&:location).map(&method(:make_relative)).join("::")
            end

            def make_relative(location)
              return location unless @relative_path
              location.sub(/^#{@relative_path}/, "./")
            end
          end
        end
      end

      module RubyLsp
        class LspReporter
          def at_coverage_exit
            coverage_results = gather_coverage_results
            # Discard paths not part of this plugin
            basepath = URI::Generic.from_path(path: File.expand_path(ENV["RUBY_LSP_RSPEC_RELPATH"])).to_s
            coverage_results.reject! do |path, data|
              !path.start_with?(basepath) || path.end_with?(".ruby-lsp/ruby_lsp_rspec_patch.rb")
            end
            File.write(File.join(ENV["RUBY_LSP_RSPEC_RELPATH"], ".ruby-lsp", "coverage_result.json"), coverage_results.to_json)
            internal_shutdown
          end
        end
      end
    RUBY
    File.open(patch_file, "w") { |file| file.write(patch) }
  end
  argv << "-r#{File.join(plugin_relpath, patch_file)}"

  ENV["RUBY_LSP_RSPEC_RELPATH"] = plugin_relpath
else
  # Probably started directly from the commandline, correct file references
  append_current_dir = true
  # TODO: poor mans guessing of which arguments to expand
  # e.g. does not expand: -rsome/relative/path; but will expand -r some/relative/path
  argv.map! do |arg|
    next arg if arg.start_with?("-")
    path = Pathname.new(arg.split(/[:\[]/).first)
    # If we cannot find the path it might be a commandline argument. But if it is a typo
    # then rspec will report an incorrect path
    next arg if !path.exist?
    append_current_dir = false
    path.absolute? ? arg : File.join(plugin_relpath, arg)
  end
  argv << plugin_relpath if append_current_dir
end

# rubocop:disable Discourse/NoChdir
Dir.chdir(discourse_root)
exec("bin/rspec", *argv)
